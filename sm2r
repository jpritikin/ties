#!/usr/bin/perl

use strict;
use warnings;
use Text::CSV_XS;
use Fatal qw(open);
use IO::File;
use Term::ANSIColor;
use Geo::IP;
our $GI = Geo::IP->open("/tmp/chromium/GeoIP-20121204/GeoLiteCity.dat", GEOIP_STANDARD);

my %ContextMap = ('religious' => 're',
		  'spiritual' => 'sp',
		  'problem' => 'ps',
		  'relaxation' => 'rx',
		  'physical' => 'pe',
		  'work' => 'wo',
		  'meditation' => 'me',
		  'daydreaming' => 'dd',
		  'flow' => 'fl');

my %PersonMap;  # anonymized ID for longitudinal measurement

sub msItems {
    my ($t2) = @_;
    if ($t2 eq 'I have met, in person, someone who is convincingly familiar with complete mental silence.') {
	'msMet'
    } elsif ($t2 eq 'I have met in person someone who is convincingly familiar with complete mental silence.') {
	'msMet'
    } elsif ($t2 eq 'At some time in my life, I have experienced complete mental silence.') {
	'msAny'
    } elsif ($t2 =~ /others in a shared context/) {
	'msShared'
    } elsif ($t2 eq 'I intentionally create favorable conditions to allow myself to experience complete mental silence.') {
	'msEnv'
    } elsif ($t2 eq 'Do you know how to intentionally cause yourself to experience complete mental silence?') {
	'msCause0'
    } elsif ($t2 eq 'I can intentionally cause myself to experience complete mental silence.') {
	'msCause'
    } elsif ($t2 eq 'I am able to teach other people how to experience complete mental silence.') {
	'msTeach'
    } elsif ($t2 =~ /possible for everybody/) {
	'msEvery'
    } elsif ($t2 =~ /ethical to pay money/) {
	'msPay'
    } elsif ($t2 =~ /train teachers/) {
	'msTrainTeach'
    } elsif ($t2 =~ /afraid of what will happen if I stop thinking/) {
	'msAfraid'
    } elsif ($t2 =~ /won't feel emotionally prepared to experience complete mental silence/) {
	'msEmo'
    } elsif ($t2 =~ /life circumstances prevent me from experiencing complete mental silence/) {
	'msLife'
    } elsif ($t2 =~ /never slow down long enough to experience complete mental silence/) {
	'msFast'
    } elsif ($t2 eq 'It takes too much effort for me to experience complete mental silence.') {
	'msEffort'
    } elsif ($t2 =~ /Descartes said, "I think therefore I am."/) {
	'msDescarte'
    } elsif ($t2 =~ /experience complete mental silence then I may lose an important aspect of who I am/) {
	'msIdentity',
    } elsif ($t2 eq 'At some time in my life, I have experienced complete mental silence accidentally.') {
	'ignore'
    } elsif ($t2 eq 'During the last few months, how often do you experience complete mental silence accidentally?') {
	'ignore'
    } elsif ($t2 eq 'I have experienced complete mental silence accidentally.') {
	'ignore'
    } elsif ($t2 eq 'Complete mental silence is not possible for myself.') {
	'ignore'
    } elsif ($t2 eq 'Complete mental silence is not possible for anybody.') {
	'ignore'
    } elsif ($t2 eq 'I intentionally yearn for the experience of complete mental silence.') {
	'msYearn'
    } elsif ($t2 eq 'I can intentionally allow myself to experience complete mental silence.') {
	'msAllow'
    }
}

sub boredItems {
    my ($t2) = @_;
    if ($t2 =~ /bored then you are likely fidgety/) {
	'boreFidget'
    } elsif ($t2 =~ /bored then you are likely cheerful/) {
	'boreCheer'
    } elsif ($t2 =~ /bored then you are likely lonely/) {
	'boreLone'
    }
}

# creates a map from col# to column name
sub mapHeader {
    my ($h1, $h2, $file) = @_;
    my %map;
    for (my $c=0; $c < @$h1; $c++) {
	my $c0 = $c;
	while (!$h1->[$c0] and $c0 > 0) { --$c0 }
	my $t1 = $h1->[$c0];
	my $t2 = $h2->[$c] || '';
	if ($t1 =~ /\s-\s/ and !$t2) {
	    my @part = split(/\s-\s/, $t1);
	    if (@part != 2) { die $t1 }
	    $t1 = $part[0];
	    $t2 = $part[1];
	}
	my $key = do {
	    if ($t1 =~ /^(CollectorID|First Name|LastName|Custom Data)$/) {
		'ignore'
	    } elsif ($t1 =~ /^(Duplicate|Time Taken|Response Status|Seq|External|Custom Var|Country Code|Region|This questionnaire)/) {
		'ignore'
	    } elsif ($t1 eq 'In order to link your responses before and after the class, please provide identifying information. Data will be anonymized after data collection is complete.') {
		'ignore'
	    } elsif ($t2 eq '' and $t1 =~ /^(Familiarity with)/) {
		'ignore'
	    } elsif ($t1 =~ /^Your experience of Complete Mental Silence/) {
		'ignore'
	    } elsif ($t1 eq 'Continuity') {
		'ignore'
	    } elsif ($t1 eq 'RespondentID' or $t1 eq 'Response ID') {
		'id'
	    } elsif ($t1 eq 'Email Group Code') {
		'groupcode'
	    } elsif ($t1 eq 'Respondent Email') {
		'email'
	    } elsif ($t1 eq 'Email Address') {
		'email'
	    } elsif ($t1 eq 'Phone') {
		'ignore'
	    } elsif ($t1 eq 'Address') {
		'ignore'
	    } elsif ($t1 eq 'If you are a University of Virginia undergraduate participating via the UVa Psychology Participants subject pool, you must enter your UVa email address to receive class participation credit (e.g., jnp3bc@virginia.edu).') {
		'email'
	    } elsif ($t1 eq 'StartDate') {
		'ignore'
	    } elsif ($t1 eq 'EndDate' or $t1 =~ /^Timestamp/) {
		'end'
	    } elsif ($t1 eq 'IP Address' or $t1 eq 'IP Address') {
		'ip'
	    } elsif ($t1 =~ /male or female/) {
		'sex'
	    } elsif ($t1 =~ /your current profession/) {
		'work'
	    } elsif ($t1 =~ /year were you born/) {
		'born'
	    } elsif ($t1 =~ /highest level of school you have completed/) {
		'edu'
	    } elsif ($t1 eq 'Location') {
		if ($t2 =~ /^City/) {
		    'city'
		} elsif ($t2 =~ /^Country/) {
		    'country';
		}
	    } elsif ($t1 =~ /relationship status/) {
		'rel'
	    } elsif ($t1 eq 'How familiar are you with the notion of complete mental silence?') {
		'msNotion'
	    } elsif ($t1 eq 'Familiarity with complete mental silence') {
		msItems($t2)
	    } elsif ($t1 eq 'Please indicate your agreement or disagreement with the following statements.') {
		msItems($t2)
	    } elsif ($t1 =~ /How certain are you about whether it is ethical to pay/) {
		'msPaySure'
	    } elsif ($t1 =~ /know how to train teachers who can teach people how to experience/) {
		'msTrainTeach'
	    } elsif ($t1 eq 'Familiarity with boredom') {
		boredItems($t2)
	    } elsif ($t1 eq 'If you do not know how to intentionally cause yourself to experience complete mental silence, would it be useful to learn?') {
		'wantLearn'  # TODO compare item param before/after phrasing change TODO
	    } elsif ($t1 eq 'If you do not know how to intentionally cause yourself to experience complete mental silence, do you want to learn?') {
		'wantLearn'
	    } elsif ($t1 eq 'How often do you experience complete mental silence accidentally?') {
		'ignore'
	    } elsif ($t1 =~ /often do you try to intentionally cause/) {
		'freqCause'
	    } elsif ($t1 =~ /what percentage of the time are you successful/) {
		'pctSuccess'
	    } elsif ($t1 eq 'During the last few months, how often have you experienced complete mental silence accidentally?') {
		'ignore'
	    } elsif ($t1 eq 'During the last few months, how often have you experienced complete mental silence?') {
		'msFreq'
	    } elsif ($t1 =~ /characterize the actual duration of your experience/) {
		'durationCharacter'
	    } elsif ($t1 =~ /actual time did your longest experience/) {
		'maxDuration'
	    } elsif ($t1 =~ /practice religion/) {
		'religion'
	    } elsif ($t1 =~ /religious affiliation/) {
		're.desc'
	    } elsif ($t1 =~ /have a spiritual practice/) {
		'spiritual'
	    } elsif ($t1 =~ /briefly describe your spiritual practice/) {
		'spiritual.desc'
	    } elsif ($t1 =~ /favorite activities for physical exercise/) {
		'pe.desc'
	    } elsif ($t1 =~ /you practice meditation/) {
		'meditation'
	    } elsif ($t1 =~ /list a favorite flow activity/) {
		'flow.desc'
	    } elsif ($t1 =~ /thinking is involved in performing your favorite flow/) {
		'flow.think'
	    } elsif ($t1 =~ /Relationship/) {
		if ($t2 =~ /complete mental silence help prepare you for your flow/) {
		    'ms.flow'
		} elsif ($t2 =~ /flow activity help prepare you for complete mental/) {
		    'flow.ms'
		}
	    } elsif ($t1 =~ /training in meditation/) {
		'm.training'
	    } elsif ($t1 =~ /so, which training/) {
		'm.training.desc'
	    } elsif ($t1 =~ /you meditated regularly/) {
		'm.regular'
	    } elsif ($t1 =~ /describe your meditative/) {
		'm.desc'
	    } elsif ($t1 =~ /comments (or questions )?about this survey/) {
		'comment'
	    } elsif ($t1 =~ /followup interview/) {
		'ignore'
	    } elsif ($t1 =~ /UVa email address/) {
		'ignore'
	    } elsif ($t1 =~ /would you say your health is/) {
		'ignore'
	    } elsif ($t1 =~ /activities you might do during a typical day/) {
		'ignore'
	    } elsif ($t1 =~ /how would you rate your health in general/) {
		'ignore'
	    } elsif ($t1 =~ /how much of the time have you had any of the following problems/) {
		'ignore'
	    } elsif ($t1 =~ /physical health or emotional problems/) {
		'ignore'
	    } elsif ($t1 =~ /bodily pain/) {
		'ignore'
	    } elsif ($t1 =~ /how much did pain interfere/) {
		'ignore'
	    } elsif ($t1 =~ /about how you feel and how things have been with you/) {
		'ignore'
	    } elsif ($t1 =~ /How TRUE or FALSE is each of the following statements/) {
		'ignore'
	    } elsif (msItems($t1)) {
		msItems($t1)
	    } elsif (boredItems($t1)) {
		boredItems($t1)
	    } else {
		my $match = '';
		keys %ContextMap; # reset iterator
		while (my ($k,$v) = each %ContextMap) {
		    next if $t1 !~ /$k/;
		    if ($t1 =~ /how often do you/) {
			if ($t2 =~ /mental silence/) {
			    $match = $v.'.ms.pf';
			    last;
			} elsif ($t2 =~ /boredom/) {
			    $match = $v.'.b.pf';
			    last;
			}
		    } elsif ($t1 =~ /subjective experience of time during/) {
			$match = $v.'.subjTime';
			last;
		    } elsif ($t1 =~ /important or inappropriate component/) {
			if ($t2 =~ /mental silence/) {
			    $match = $v . '.ms.gi';
			    last;
			} elsif ($t2 =~ /boredom/) {
			    $match = $v . '.b.gi';
			    last;
			}
		    }
		}
		$match
	    }
	};
	if ($t1 eq 'ignore') {
	    #
	} elsif (!$key) {
	    warn "$file: $t1 | $t2";
	} elsif ($key eq 'ignore') {
	    our %Ignored;
	    my $ikey = "$t1|$t2";
	    if (!exists $Ignored{$ikey}) {
		$Ignored{$ikey} = 1;
		#warn "$t1 | $t2 ignored"
	    }
	} else {
	    $map{$c} = $key
	}
    }
    \%map;
}

sub reverseMap {
    my ($bestMap) = @_;
    my %outMap;
    my $col=0;
    for my $k (sort { $a <=> $b } keys %$bestMap) {
	$outMap{ $bestMap->{$k} } = $col++;
    }
    \%outMap;
}

my $csv = Text::CSV_XS->new ({ binary => 1, eol => "\n" }) or
  die "Cannot use CSV: ".Text::CSV_XS->error_diag ();

my @data;

my $dest = pop @ARGV;

die "No files provided" if !@ARGV;

my $outMap = {};
for my $file (@ARGV) {
    open my $io, '<', $file;
    my $h1 = $csv->getline($io);
    my $h2 = [];
    if (@$h1 == 1 and $h1->[0] =~ /^Data Export/) {
	$csv->getline($io);
	$h1 = $csv->getline($io);
    } else {
	$h2 = $csv->getline($io);
    }
    my $map = mapHeader($h1, $h2, $file);
    next if !$map;
    push @data, [$file, $io, $map];
    for my $k (values %$map) { ++$outMap->{$k} }
}

{
    my $cn = 0;
    for my $k (sort keys %$outMap) { $outMap->{$k} = $cn++ }
}

my $out = IO::File->new();
$out->open(">$dest") or die $?;

# outputs an array of column headers
sub getHeader {
    my ($h) = @_;
    my @h;
    while (my ($k,$v) = each %$h) {
	$h[$v] = $k;
    }
    push @h, qw(wave ip.continent ip.country ip.region ip.city); # for @extra
    \@h;
}

$csv->print($out, getHeader($outMap));

our %ID;

for my $waveinfo (@data) {
    my ($file, $io, $map) = @$waveinfo;
    while (my $row = $csv->getline($io)) {
	my @outRow = ('') x scalar(keys(%$outMap));
	my $wavename = $file;
	$wavename =~ s/\.csv$//;
	my @extra = ($wavename);
	my $skip;
	for my $sk (keys %$map) {
	    my $value = $row->[$sk];
	    my $key = $map->{$sk};
	    if ($value =~ /\btest\b/i and $value !~ /(taking a test|test-taking)/i) {
		$skip = 1;
	    }
	    if ($key eq 'groupcode' and $value !~ /^LIST/) {
		$skip = 1;
	    }
	    if ($key eq 'id' and $value ne '') {
		if (exists $ID{$value}) {
		    warn("ID $value observed ". ++$ID{$value});
		} else {
		    $ID{$value} = 1;
		}
	    }
	    if (0 and $key eq 'email') {
		if ($value eq 'jnp3bc@virginia.edu' or $value =~ /^throwaway/) {
		    warn "Ignoring $value";
		    $skip = 1;
		}
		# anonymizer
		if (exists $PersonMap{$value}) {
		    $value = $PersonMap{$value};
		} else {
		    my $id = keys %PersonMap;
		    $PersonMap{$value} = $id;
		    $value = $id;
		}
	    }
	    if ($key eq 'ip' and $GI) {
		my $record = $GI->record_by_addr($value);
		push @extra, ($record->continent_code,
			      $record->country_name,
			      $record->region_name,
			      $record->city);
	    }
	    $outRow[ $outMap->{$key} ] = $value;
	}
	if ($skip) {
	    if (0) {
		print "Skipping ";
		for my $s (@outRow) {
		    if ($s =~ /test/i) {
			print color 'bold blue';
			print $s;
			print color 'reset';
		    } else {
			print $s;
		    }
		    print " ";
		}
		print "\n";
	    }
	    next;
	}
	push @outRow, @extra;
	$csv->print($out, \@outRow);
    }
}
