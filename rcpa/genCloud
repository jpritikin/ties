#!/usr/bin/perl

use strict;
use warnings;
use Archive::Zip qw(AZ_OK);
use Text::CSV_XS;
use Fatal qw(open);
use Graph;
use Date::Manip;
use POSIX qw(strftime);
use Data::Dumper;

my %ShortDict =
  ('mountainbiking' => 'mountain biking',
   'powerlifting' => 'weightlifting',
   'lifting' => 'weightlifting',
   'weight lifting' => 'weightlifting',
   'softball' => 'baseball'
  );

my %LongDict =
  (
   'basketball@indoor basketball' => 'basketball',
   'skiing@snow skiing' => 'snow skiing',
   'swimming@butterfly' => 'swimming',
   'weightlifting@i do a 6 day a week push-pull-leg routine (search up coolcicadas ppl for an idea of what i do), in the gym anytime from 45 minutes to an hour.' => 'weightlifting',
   'lifting@weight lifting' => 'weightlifting',
   'weight lifting@repeat, weight lifting' => 'weightlifting',
   'hockey@ice hockey goalie' => 'ice hockey',
   'body balance@it is mixture of yoga and pilates, but more dynamic and the exercises  have "choreographies" that fit with specific songs' => 'pilates',
   'golf@college golf' => 'golf',
   'baseball@college baseball' => 'baseball',
   'belly dancing@middle eastern dance. low impact' => 'belly dancing',
   'bowling@10-pin style' => 'bowling',
   'baseball@college baseball' => 'baseball',
   'running@marathon and mini-marathon training' => 'running',
   'running@road running' => 'running',
   'running@running to get in shape' => 'running',
   'basketball@playing basketball 3 on 3' => 'basketball',
   'running@running on a track' => 'running',
   'golf@college golf' => 'golf',
   'baseball@college baseball' => 'baseball',
   'mma@mixed martial arts' => 'mixed martial arts',
   'football@american football' => 'football',
   'basketball@american basketball' => 'basketball',
   'walking@walking at a brisk pace through the neighborhood' => 'walking',
   'swimming@swimming at the beach and riding the waves' => 'swimming',
   'running@recreational running for the health and stress relief with the occasional race for fun' => 'running',
   'basketball@semi competitive club basketball on a college team' => 'basketball',
   'football@running and chasing after the running back' => 'football',
   'running@free running outside.' => 'running',
   'swimming@distance swimming' => 'swimming',
   'running@running on treadmill' => 'running',
   'running@running on a treadmill to burn fat' => 'running',
   'mma@mixed martial arts.'=> 'mixed martial arts',
   'football@intramural flag football' => 'football',
   'running@ran 1 mile.' => 'running',
   'ultimate frisbee@7 vs 7 frisbee on an approximate 50 yard field in college. 2-3x per week.' => 'ultimate frisbee',
   'gymnastics@i compete in womens gymnastics' => 'gymnastics',
   'gymnastics@i compete in womens gymnastics.' => 'gymnastics',
   'soccer@intramural indoor soccer' => 'soccer',
   'soccer@advanced soccer, collegial elective course.' => 'soccer',
   'soccer@i play soccer with a group.' => 'soccer',
   'soccer@i play soccer when i am not dancing.' => 'soccer',
   'tennis@womens singles tennis' => 'tennis',
   'hiking@hiking in local park' => 'hiking',
   'tennis@singles' => 'tennis',
   'skiing@water skiing' => 'water skiing',
   'ping pong@also known as table tennis' => 'table tennis',
   'cricket@cricket- will answer questions in relation to bowling only' => 'cricket',
   'weight lifting@core and weight lifting to lean muscles' => 'weightlifting',
   'lifting@lifting weights' => 'weightlifting',
   'lifting@lifting weights to make my muscles stronger.' => 'weightlifting',
   'tennis@singles tennis' => 'tennis',
   'cycling@bike riding for exercise, sport, and transportation.' => 'cycling',
   'dance@hiphop dance' => 'dance',
   'dance@dance is what i rote and it is basically just hip hop dance!' => 'dance',
   'snowboarding@downhill snowboarding' => 'snowboarding',
   'vinyasa yoga@hot flow yoga' => 'yoga',
   'hiit@high intensity interval training class at ymca (45-55 min)' => 'cardio',
   'track and field@shot-put and discus' => 'throwing sports',
   'netball@position- goal defence' => 'netball',
   'swimming@competitive lap swimming' => 'swimming',
   'running@running around a track' => 'running',
   'swimming@doing laps in a pool' => 'swimming',
   'running@running long distances of 1-2 miles or more' => 'running',
   'powerlifting@powerlifting is a sport that is based on your 1-rm.  in a competition setting, the athlete (myself) will have 3 chances to execute each one of the big lifts.  the big lifts are, squat, bench, and deadlift.  in a competition setting you will be judged for your performance and based on the rules if you succeed your score will be in the form of white lights.  a lifter must have 2 white lights out of the 3 for the attempt to count towards the final total you obtain at the end of the competition.' => 'weightlifting',
   'softball@high school' => 'baseball',
   'softball@i practice hitting and fielding' => 'baseball',
   'basketball@i run, dribble, and shoot basketballs' => 'basketball',
   'softball@hit and through softballs, ran, and had several workouts' => 'baseball',
   'basketball@ran, dribbled, and shot the basketballs' => 'basketball',
   'basketball@womens college basketball' => 'basketball',
   'basketball@college womens basketball' => 'basketball',
   'softball@church league softball' => 'baseball',
   'slow-pitch softball@slow-pitch softball is a recreational co-ed sport that i participate in.  generally you will have 4 out fielders and a regular infield set up, the pitcher will lob the ball for the batter to hit.  the game generally lasts an hour and 15 minutes depending on the league, and umpire is present to keep the game flowing smoothly.' => 'baseball',
   'swimming@swimming laps in a pool back and forth.' => 'swimming',
   'surfboard surfing@riding medium size (10) waves on the n shore and california' => 'surfing',
   'stand up paddle surfing@riding medium size (10) waves on the n shore and california but with less effort and risk than on a surfboard as standing minimizes take off risk' => 'stand up paddle surfing',
   'volleyball@hitting a ball back and forth over a net. avoiding it from touching the ground.' => 'volleyball',
   'springboard diving@1-meter and 3-meter springboard diving' => 'diving',
   'weight lifting@dumbbells' => 'weightlifting',
   'lifting@lifting weights in a gym setting' => 'weightlifting',
   'weight lifting@i do a variation of hang cleans, barbell squats, dead lifts, over-head snatchs, and any type of olympic lifts in sets that range from 5x5, 4x10, 5x3.' => 'weightlifting',
   'running@i run outside or on a treadmill usually 2 miles. or i elliptical for 30-45 min at moderate intensity.' => 'running',
   'tennis@tennis competitive, singles and doubles' => 'tennis',
   'basketball@social group with friends, not competitive' => 'basketball',
  );

use constant PA1_START  => 15;
use constant PA2_START  => 18;
use constant RCPA_START => 21;

### BEGIN GLOBAL STATE

my %VettedName;
my %NodeInfo;
my %NodeGroupInfo;
my %EdgeInfo;
my $Graph = Graph::Undirected->new();

for my $k (values %ShortDict) { $VettedName{$k} = 1 }
for my $k (values %LongDict)  { $VettedName{$k} = 1 }

### END GLOBAL STATE

sub trim {
    my ($str) = @_;
    $str =~ s/^\s+//;
    $str =~ s/\s+$//;
    $str
}

sub useNode {
    my ($pa,$solo) = @_;
    my $name = join(';', $pa, lc $solo);
    if (!exists $NodeInfo{$name}) {
	$NodeInfo{$name} = { count => 0 };
	$NodeGroupInfo{$pa} = {};
    }
    ++$NodeInfo{$name}{count};
    ++$NodeGroupInfo{$pa}{$solo};
    $name
}

sub node {
    my ($short, $long, $solo) = @_;
    $long = lc trim($long);
    $short = lc trim($short);
    $short =~ s/\@//g;
    if ($long eq '' or $short eq $long) {
	if (exists $ShortDict{$short}) {
	    $short = $ShortDict{$short};
	}
	return useNode($short,$solo);
    } else {
	$long =~ s/\'//g;
	my $full = $short . '@' . $long;
	if (exists $LongDict{$full}) {
	    $short = $LongDict{$full};
	    return useNode($short,$solo);
	}
	if (exists $ShortDict{$short}) {
	    $short = $ShortDict{$short};
	}
	if (exists $VettedName{$short}) {
	    print "   '$full' => '$short',\n";
	} else {
	    print("   '$full' => '',\n");
	}
    }
    undef
}

our @RC_SKILL_MAP =
  ('{{Q8}} requires much more skill than {{Q6}}.',
   '{{Q8}} requires somewhat more skill than {{Q6}}.',
   'Both require roughly equal skill.',
   '{{Q6}} requires somewhat more skill than {{Q8}}.',
   '{{Q6}} requires much more skill than {{Q8}}.');

our @RC_PREDICT_MAP =
  ('{{Q6}} is much more predictable than {{Q8}}.',
   '{{Q6}} is somewhat more predictable than {{Q8}}.',
   'Both offer roughly equal predictability.',
   '{{Q8}} is somewhat more predictable than {{Q6}}.',
   '{{Q8}} is much more predictable than {{Q6}}.');

our @RC_NOVELTY_MAP =
  ('{{Q8}} offers a much more novelty than {{Q6}}.',
   '{{Q8}} offers a somewhat more novelty than {{Q6}}.',
   'Both offer roughly equal novelty.',
   '{{Q6}} offers a somewhat more novelty than {{Q8}}.',
   '{{Q6}} offers a much more novelty than {{Q8}}.');

our @RC_CREATIVE_MAP =
  ('{{Q6}} admits much more creativity than {{Q8}}.',
   '{{Q6}} admits somewhat more creativity than {{Q8}}.',
   'Both admit roughly the same amount of creativity.',
   '{{Q8}} admits somewhat more creativity than {{Q6}}.',
   '{{Q8}} admits much more creativity than {{Q6}}.');

our @RC_COMPLEX_MAP =
  ('{{Q8}} is much more complex than {{Q6}}.',
   '{{Q8}} is somewhat more complex than {{Q6}}.',
   'Both are of roughly equal complexity.',
   '{{Q6}} is somewhat more complex than {{Q8}}.',
   '{{Q6}} is much more complex than {{Q8}}.');

our @RC_GOAL_MAP =
  ('{{Q6}} has much more clear rules and goals than {{Q8}}.',
   '{{Q6}} has somewhat more clear rules and goals than {{Q8}}.',
   'Both have equally clear rules and goals.',
   '{{Q8}} has somewhat more clear rules and goals than {{Q6}}.',
   '{{Q8}} has much more clear rules and goals than {{Q6}}.');

our @RC_FEEDBACK_MAP =
  ('{{Q8}} has much more immediate feedback than {{Q6}}.',
   '{{Q8}} has somewhat more immediate feedback than {{Q6}}.',
   'Both offer roughly equally immediate feedback.',
   '{{Q6}} has somewhat more immediate feedback than {{Q8}}.',
   '{{Q6}} has much more immediate feedback than {{Q8}}.');

our @RC_CHATTER_MAP =
  ('{{Q6}} turns off my mental chatter much more than {{Q8}}.',
   '{{Q6}} turns off my mental chatter somewhat more than {{Q8}}.',
   'Both turn off my mental chatter to a roughly equal extent.',
   '{{Q8}} turns off my mental chatter somewhat more than {{Q6}}.',
   '{{Q8}} turns off my mental chatter much more than {{Q6}}.');

our @RC_WAITING_MAP =
  ('{{ Q8 }} involves a lot more waiting than {{ Q6 }}.',
   '{{ Q8 }} involves a somewhat more waiting than {{ Q6}}.',
   'Both involve about the same amount of waiting.',
   '{{ Q6 }} involves a somewhat more waiting than {{ Q8}}.',
   '{{ Q6 }} involves a lot more waiting than {{ Q8 }}.');

our @RC_BODY_MAP =
  ('{{Q6}} involves much more of my body than {{Q8}}.',
   '{{Q6}} involves somewhat more of my body than {{Q8}}.',
   'Both involve my body to a roughly equal extent.',
   '{{Q8}} involves somewhat more of my body than {{Q6}}.',
   '{{Q8}} involves much more of my body than {{Q6}}.');

our @RC_CONTROL_MAP =
  ('{{Q8}} permits much more control than {{Q6}}.',
   '{{Q8}} permits somewhat more control than {{Q6}}.',
   'Both admit roughly equal control.',
   '{{Q6}} permits somewhat more control than {{Q8}}.',
   '{{Q6}} permits much more control than {{Q8}}.');

our @RC_PRESENT_MAP =
  ('{{Q6}} brings me into the present much more than {{Q8}}.',
   '{{Q6}} brings me into the present somewhat more than {{Q8}}.',
   'Both bring me into the present to a roughly equal extent.',
   '{{Q8}} brings me into the present somewhat more than {{Q6}}.',
   '{{Q8}} brings me into the present much more than {{Q6}}.');

our @RC_SPONT_MAP =
  ('{{Q8}} feels effortless compare to {{Q6}} where I have to struggle and force myself.',
   '{{Q8}} feels like less effort than {{Q6}}.',
   'Both require about the same extent of effort (both either effortless or effortful).',
   '{{Q6}} feels like less effort than {{Q8}}.',
   '{{Q6}} feels effortless compare to {{Q8}} where I have to struggle and force myself.');

our @RC_STAKES_MAP =
  ('{{Q6}} has much higher stakes than {{Q8}}.',
   '{{Q6}} has somewhat higher stakes than {{Q8}}.',
   'Both have roughly equal stakes.',
   '{{Q8}} has somewhat higher stakes than {{Q6}}.',
   '{{Q8}} has much higher stakes than {{Q6}}.');

our @RC_EVALUATED_MAP =
  ("During {{Q8}}, I am much more concerned about others' evaluations than during {{Q6}}.",
   "During {{Q8}}, I am somewhat more concerned about others' evaluations than during {{Q6}}.",
   "During both {{Q8}} and {{Q6}}, I have roughly equal concern about others' evaluations.",
   "During {{Q6}}, I am somewhat more concerned about others' evaluations than during {{Q8}}.",
   "During {{Q6}}, I am much more concerned about others' evaluations than during {{Q8}}.");

our @RC_REWARD_MAP =
  ('{{Q6}} is much more rewarding than {{Q8}}.',
   '{{Q6}} is somewhat more rewarding than {{Q8}}.',
   'Both are roughly equally rewarding.',
   '{{Q8}} is somewhat more rewarding than {{Q6}}.',
   '{{Q8}} is much more rewarding than {{Q6}}.');

our @RC_INJURY1_MAP =
  ('{{Q8}} has much more chance of physical injury compare to {{Q6}}.',
   '{{Q8}} has somewhat more chance of physical injury compare to {{Q6}}.',
   'The chance of physical injury is roughly equal.',
   '{{Q6}} has somewhat more chance of physical injury compare to {{Q8}}.',
   '{{Q6}} has much more chance of physical injury compare to {{Q8}}.');

our @RC_INJURY2_MAP =
  ('{{Q6}} has much more chance of serious physical injury compare to {{Q8}}.',
   '{{Q6}} has somewhat more chance of serious physical injury compare to {{Q8}}.',
   'The chance of serious physical injury is roughly equal.',
   '{{Q8}} has somewhat more chance of serious physical injury compare to {{Q6}}.',
   '{{Q8}} has much more chance of serious physical injury compare to {{Q6}}.');

sub cmpToNum {
    my ($map, $cmp) = @_;
    return 'NA' if (!length $cmp);
    $map->[0] =~ m/\{\{\s*Q(\d)\s*\}\}/;
    die $1 if ($1 != 6 and $1 != 8);
    my $sign = $1==8? 1 : -1;
    for my $x (0..4) {
	if ($map->[$x] eq $cmp) {
	    return $sign * ($x - 2)
	}
    }
    die "'$cmp' not found";
}

our %SHORT_MASTERY =
  ('Beginner' => 1,
   'Competent amateur' => 2,
   'Expert or professional' => 3);

sub shortenMastery {
    my ($mastery) = @_;
    my $sm = $SHORT_MASTERY{$mastery};
    die $mastery if !defined $sm;
    $sm;
}

sub edge {
    my ($n1, $l1, $n2, $l2, $version, $field) = @_;
    return if (!defined $n1 or !defined $n2);
    my @k = ($n1,$n2);
    my @sk = sort @k;
    my $sign = $k[0] ne $sk[0]? -1 : 1;
    my $k = join ':', @sk;
    if (!exists $EdgeInfo{$k}) {
	$EdgeInfo{$k} = { n1 => $n1, n2 => $n2, count => 0 };
    }
    my $info = $EdgeInfo{$k};
    if (++$info->{count} == 2) { # increase to limit to a minimum sample size TODO
	$Graph->add_edge($n1, $n2);
    }
    $info->{l1} = shortenMastery($l1);
    $info->{l2} = shortenMastery($l2);
    my @map = (\@RC_SKILL_MAP, \@RC_PREDICT_MAP, \@RC_NOVELTY_MAP, \@RC_CREATIVE_MAP,
	       \@RC_COMPLEX_MAP, \@RC_GOAL_MAP, \@RC_FEEDBACK_MAP, \@RC_GOAL_MAP, \@RC_FEEDBACK_MAP,
	       \@RC_CHATTER_MAP, \@RC_WAITING_MAP, \@RC_BODY_MAP, \@RC_CONTROL_MAP, \@RC_PRESENT_MAP,
	       \@RC_SPONT_MAP, \@RC_STAKES_MAP, \@RC_EVALUATED_MAP, \@RC_REWARD_MAP, \@RC_INJURY1_MAP,
	       \@RC_INJURY2_MAP);
    my $rating = [];
    for my $x (0..19) {
	my $got = cmpToNum($map[$x], $field->[RCPA_START + 4 + $x]);
	if ($got ne 'NA') {
	    $got *= $sign;
	    if ($x == 1 and Date_Cmp($version, "2016-12-25") < 0) {
		# switched from unpredict to predict
		$got *= -1;
	    }
	}
	push @$rating, $got;
    }
    push @{ $info->{rating} }, $rating;
}

sub loadZip {
    my ($zip) = @_;
    my $somezip = Archive::Zip->new();
    $somezip->read( $zip ) == AZ_OK or die $!;
    my $rawData = $somezip->contents('CSV/Sheet_1.csv');
    $rawData =~ tr/\xa0/ /;	# nonbreaking space
    $rawData =~ s/\xc2//gs;	# garbage?

    my @line = split /[\r\n]+/, $rawData;

    my $csv = Text::CSV_XS->new ({ keep_meta_info => 1, binary => 1 });

    for my $lx (1..$#line) {
	if ($csv->parse($line[$lx])) {
	    my @field = $csv->fields;
	    if (0) {
		foreach my $col (0 .. $#field) {
		    printf "%2d: %s\n", $col, $field[$col];
		}
	    }
	    next if ($field[PA1_START] =~ m/^\s*$/ or $field[PA2_START] =~ m/^\s*$/);
	    my $skipped = 0;
	    for my $col (RCPA_START .. 42) {
		++$skipped if $field[$col] =~ /^\s*$/;
	    }
	    next if $skipped > 10;

	    my $n1 = node($field[PA1_START], $field[PA1_START + 1], $field[RCPA_START+0]);
	    my $n2 = node($field[PA2_START], $field[PA2_START + 1], $field[RCPA_START+1]);
	    next if (!defined $n1 or !defined $n2 or $n1 eq $n2);
	    edge($n1, $field[RCPA_START+2], $n2, $field[RCPA_START+3], ParseDate($field[2]), \@field);
	} else {
	    print STDERR "parse () failed on argument: ",
	      $csv->error_input, "\n";
	    $csv->error_diag ();
	}
    }
}

sub assignNodeId {
    my @k = sort keys %NodeInfo;
    for my $id (1..@k) {
	my $info = $NodeInfo{ $k[$id-1] };
	$info->{id} = $id;
	# May want to allow separate estimates for these? TODO
	#warn $k[$id-1] if ($info->{Group} and $info->{Solo});
    }
}

sub outputGraph {
    my $stamp = strftime("%b %d, %Y", localtime());
    open my $fh, ">", "pa-browser/rcpa-graph.js";
    my $oldOut = select $fh;

    print "var RCPA_date = '$stamp';\n";
    print "var RCPA_nodes = [\n";
    for my $k (sort keys %NodeInfo) {
	my $name = simplifyName($k);
	my @part = split /;/, $name;
	if (@part == 2) { $name = "$part[0] ($part[1])" }
	print "  {id: $NodeInfo{$k}{id},  value: $NodeInfo{$k}{count},  label: '$name' },\n";
    }
    print "];\n";

    print "var RCPA_edges = [\n";
    for my $k (sort keys %EdgeInfo) {
	my $i = $EdgeInfo{$k};
	my $n1 = $NodeInfo{ $i->{n1} };
	my $n2 = $NodeInfo{ $i->{n2} };
	print "  {from: $n1->{id}, to: $n2->{id}, value: $i->{count} },\n";
    }
    print "];\n";
    select $oldOut;
}

sub outputDebug {
    for my $k (sort keys %NodeInfo) {
	print "$k $NodeInfo{$k}{count}\n";
    }
    for my $k (sort keys %EdgeInfo) {
	print "$k $EdgeInfo{$k}{count}\n";
    }
}

sub simplifyName {
    my ($nn) = @_;
    my @part = split /;/, $nn;
    my $gi = $NodeGroupInfo{ $part[0] };
    if (keys %$gi == 1) {
	return $part[0]
    } else {
	return $nn;
    }
}

sub outputData {
    my $csv = Text::CSV_XS->new ({ binary => 1, auto_diag => 1 });
    open my $fh, ">:encoding(utf8)", "rawData.csv";
    $csv->say($fh, ['pa1', 'l1', 'pa2', 'l2', 'skill', 'predict', 'novelty', 'creative', 'complex',
		    'goal1', 'feedback1', 'goal2', 'feedback2', 'chatter', 'waiting',
		    'body', 'control', 'present', 'spont', 'stakes', 'evaluated', 'reward',
		    'injury1', 'injury2']);
    my @cc = sort { $#$b <=> $#$a  } $Graph->connected_components();
    my %white;
    $white{$_}=1 for @{ $cc[0] };
    for my $edge (values %EdgeInfo) {
	next if (!$white{$edge->{n1}} or !$white{$edge->{n2}});
	for my $rate (@{ $edge->{rating} }) {
	    $csv->say($fh, [simplifyName($edge->{n1}), $edge->{l1},
			    simplifyName($edge->{n2}), $edge->{l2}, @$rate]);
	}
    }
}

loadZip(shift);

assignNodeId();

outputGraph();

outputData();
