#!/usr/bin/perl

use strict;
use warnings;
use Cairo;
use List::Util qw(sum);
use Fatal qw(mkdir unlink);
use Math::Spline qw(binsearch);
require GD;
use constant BG_FILE => 'brain.png';
use constant WIDTH => 200;
use constant HEIGHT => 200;
use constant TMPDIR => 'gen';
use constant THOUGHT_WIDTH => 160/5;
use constant THOUGHT_HEIGHT => -30;
use constant THOUGHT_X => WIDTH/2 + 10;   # middle
use constant THOUGHT_Y => 75;
use constant TEXT_Y => THOUGHT_Y - THOUGHT_HEIGHT + 20;
use constant PI => 3.1415926535;
use constant JITTER => .75;
use constant OPTIMIZE => 0;
use constant FRAME_STEP => .1;
use constant SILENCE => .1;
#use Data::Dumper;

our $background = Cairo::ImageSurface->create_from_png(BG_FILE);

# Erich Neuwirth (2011). RColorBrewer: ColorBrewer palettes. R package
# version 1.0-5. http://CRAN.R-project.org/package=RColorBrewer
our @Set1 = ("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00",
	     "#FFFF33", "#A65628", "#F781BF", "#999999");

sub getBrewerColor {
    my ($x) = @_;
    my $color = $Set1[$x % @Set1];
    (hex(substr($color,1,2))/255.0,
     hex(substr($color,3,2))/255.0,
     hex(substr($color,5,2))/255.0)
}

-d TMPDIR or mkdir TMPDIR;

# thought coordinate system:
# x -2 to 2

our $ampCurve = Math::Spline->new([-2,-1,-.5,.5,1,2], [.3,.6,1,1,.6,.3]);

sub thoughtFunc {
    my ($state, $warpx) = @_;
    my $loc = $state->{loc};
    my $spline = $state->{spline};
    my $at = binsearch($loc, $warpx);
    my $pct = ($warpx - $loc->[$at]) / ($loc->[$at+1] - $loc->[$at]);
    my $height = $spline->evaluate($warpx);
    ($height + $height * sin($pct*2*PI))
}

sub mean { # not used
    my ($v) = @_;
    sum(@$v)/scalar(@$v)
}

sub integrateStepFunc {
    my ($loc, $v, $from, $to) = @_;
    my $x1 = binsearch($loc, $from);
    my $x2 = binsearch($loc, $to);
    my $count = 0;
    my $sum = 0;
    my $pct = 1 - ($from - $loc->[$x1]) / ($loc->[$x1+1] - $loc->[$x1]);
    $sum += $pct * $v->[$x1];
    $count += $pct;
    $pct = ($to - $loc->[$x2]) / ($loc->[$x2+1] - $loc->[$x2]);
    $sum += $pct * $v->[$x2];
    $count += $pct;
    for (my $x=$x1+1; $x < $x2; $x += 1) {
	$sum += $v->[$x];
	$count += 1;
    }
    $sum / $count;
}

sub framePath {
    my ($f) = @_;
    TMPDIR.sprintf("/frame-%03d.png", $f);
}

sub warpX {
    my ($x) = @_;
    $x * (1-sin((.5+$x/4) * PI));
}

sub showJitterText {
    my ($cr, $text, $meanAmp, $y) = @_;

    my @letter = split / */, $text;
    my @ext = map { $cr->text_extents($_) } @letter;
    my $width = sum(map { JITTER*2 + $_->{x_advance} } @ext);
    $cr->move_to(THOUGHT_X - ($width/2 + $ext[0]->{x_bearing}), $y);
    for (my $l=0; $l < @letter; $l++) {
	my $jitter_x = rand($meanAmp * JITTER*2) - JITTER;
	my $jitter_y = rand($meanAmp * JITTER*2) - JITTER;
	$cr->rel_move_to($jitter_x, $jitter_y);
	$cr->show_text($letter[$l]);
	$cr->rel_move_to(-$jitter_x, -$jitter_y);
	$cr->rel_move_to(JITTER*2,0);
    }
}

sub drawFrame {
    my ($f, $state) = @_;

    my $loc = $state->{loc};
    my $amp = $state->{amp};
    my $spline = Math::Spline->new($loc, $state->{amp});
    $state->{spline} = $spline;

    my $surface = Cairo::ImageSurface->create('argb32', WIDTH, HEIGHT);
    my $cr = Cairo::Context->create($surface);

    $cr->save;
    $cr->set_source_rgb(1,1,1);
    $cr->paint;
    $cr->restore;

    my $meanAmp = integrateStepFunc($loc, $state->{amp},-2,2);

    $cr->save;
    $cr->set_source_surface($background, 0,0);
    $cr->paint_with_alpha(.55 - (1-$meanAmp)*.3);
    $cr->restore;

    my $stretch_x = ((1 - sin($meanAmp*PI/2)/4) * THOUGHT_WIDTH);

    $cr->save;
    my $x1 = binsearch($loc, -2);
    my $x2 = binsearch($loc, 2);
    for (my $x=$x1; $x <= $x2; $x++) {
	my $pos = $loc->[$x];
	next if $pos < -2;
	next if $amp->[$x] == 0;
	# pos range -2 .. 1.9
	my @color = getBrewerColor($x);
	my $altitude = $spline->evaluate($pos) * THOUGHT_HEIGHT;
	my $alpha = (1-(abs($pos) / 2)) * ($meanAmp - SILENCE);
	if ($pos < 0) {
	    $cr->arc($pos * THOUGHT_WIDTH + THOUGHT_X,
		     $altitude * $ampCurve->evaluate($pos) + THOUGHT_Y,
		     .5+(1-($pos/-2))*5, 0, 2*PI);
	    $cr->set_source_rgba(@color, $alpha);
	    $cr->fill_preserve;
	    $cr->set_line_width(.25);
	    $cr->set_source_rgba(0,0,0, $alpha);
	    $cr->stroke;
	} else {
	    $cr->arc(THOUGHT_X,
		     $altitude * $ampCurve->evaluate(0) + THOUGHT_Y,
		     5+$pos*22, 0, 2*PI);
	    $cr->set_source_rgba(@color, $alpha);
	    $cr->fill;
	}
    }
    $cr->restore;

    $cr->save;
    $cr->set_source_rgba(.5,.5,1,1);
    $cr->set_line_width((1.25-$meanAmp) * 8);
    $cr->set_line_cap('round');
    $cr->set_line_join('round');
    $cr->new_path;
    my $flat = 1;
    for (my $x=-2; $x <= 2; $x += .025) {
	my $warpx = warpX($x);
	my $wave = thoughtFunc($state, $warpx) * $ampCurve->evaluate($x) * THOUGHT_HEIGHT;
	$flat = 0 if abs($wave) > .4;
	my @pos = ($x * $stretch_x + THOUGHT_X,
		   $wave + THOUGHT_Y);
	$cr->line_to(@pos);
    }
    $cr->stroke;
    $cr->restore;

    $cr->save;
    $cr->select_font_face("Sans", "normal", "bold");
    if ($meanAmp > SILENCE) {
	$cr->set_font_size(19);
	$cr->set_source_rgba(0,.4,0, $meanAmp - SILENCE);
	my $fo = $cr->get_font_options;
	$fo->set_antialias('gray');
	$fo->set_hint_metrics('off');
	$fo->set_hint_style('none');
	$cr->set_font_options($fo);
	showJitterText($cr, 'thought', $meanAmp, TEXT_Y);
	showJitterText($cr, 'emotion', $meanAmp, TEXT_Y + 30);
    } else {
	my $text = 'mental silence';
	$cr->set_source_rgb(.7,.5,.5);
	$cr->set_font_size(16);
	my $ext = $cr->text_extents($text);
	$cr->move_to(THOUGHT_X - ($ext->{width}/2 + $ext->{x_bearing}),
		     TEXT_Y);
	$cr->show_text($text);
    }
    $cr->restore;

    my $out = framePath($f);
    if (-f $out) { unlink($out) }
    if (OPTIMIZE) {
	if ($flat and $state->{silentFrame} < 1) {
	    ++$state->{silentFrame};
	    $surface->write_to_png($out);
	} elsif (!$flat) {
	    $surface->write_to_png($out);
	}
    } else {
	$surface->write_to_png($out);
    }

    die $cr->status
      if $cr->status ne 'success';
}

sub drawFrames {
    my @amp = reverse ((SILENCE/2)x3,1/3,2/3,(1)x7,3/4,1/2,1/4,(SILENCE/2)x7);
    my @beginning = @amp[-5..-1];
    unshift @amp, @beginning;
    my @loc = 1 .. scalar(@amp);
    for my $l (@loc) { $l -= scalar(@amp)-2 }
    my $tape = { loc => \@loc, amp => \@amp, silentFrame => 0 };
    my $frames = (scalar(@amp) - 5) / FRAME_STEP;
#    my $frames = 100;
    for (my $f=0; $f < $frames; $f++) {
	drawFrame($f, $tape);
	for my $l (@{$tape->{loc}}) { $l += FRAME_STEP }
    }
    convertToGIF($frames);
}

sub convertToGIF {
    my ($frames) = @_;
    my $frameDelay = 100 * FRAME_STEP;
    open my($gif), '>', TMPDIR.'/mental.gif';
    my $prevFrame;
    my $curFrame = GD::Image->new(framePath(0));
    print $gif $curFrame->gifanimbegin(1,0);
    print $gif $curFrame->gifanimadd(1,0,0,$frameDelay,1);
    my $nextFrame = GD::Image->new(framePath(1));
    for (my $f=2; $f < $frames; $f++) {
	$prevFrame = $curFrame;
	$curFrame = $nextFrame;
	my $delay = $frameDelay;
	while (1) {
	    if (-r framePath($f)) {
		$nextFrame = GD::Image->new(framePath($f));
		last;
	    }
	    $f += 1;
	    $delay += $frameDelay;
	    if ($f > $frames-1) {
		die "Can't find frame $f delay $delay";
	    }
	}
	print $gif $curFrame->gifanimadd(1,0,0,$delay,1,$prevFrame);
    }
    print $gif $nextFrame->gifanimadd(1,0,0,$frameDelay,1,$curFrame);
    print $gif $nextFrame->gifanimend;
}

drawFrames();
#convertToGIF();
