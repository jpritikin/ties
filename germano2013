#!/usr/bin/perl

use Modern::Perl qw(2012);
use Text::CSV_XS;
use Fatal qw(open);
use IO::File;
use List::Util qw(sum);

my $csv = Text::CSV_XS->new ({ binary => 1, eol => "\n" }) or
  die "Cannot use CSV: ".Text::CSV_XS->error_diag ();

our %Demog = ();

sub load_header {
    open my $io, '<', 'raw.csv';
    my $h = $csv->getline($io);
    my %map;
    for (my $c=0; $c < @$h; ++$c) {
	$map{ $h->[$c] } = $c;
    }
    \%map;
}

our $OutMap = load_header();

sub load_demog {
    open my $demog, '<', 'Germano-2013-demog.csv';
    my $h1 = $csv->getline($demog);
    while (defined(my $r = $csv->getline($demog))) {
	next if !@$r;
	if ($r->[3] ne 'FALSE') {
	    next
	}
	my $key = $r->[13];
	if ($r->[14] !~ /^LIST/) {
	    next
	}
	my $year_born = $r->[20];
	my $major = $r->[24];
	my $sex = $r->[25];
	if (!length($sex)) {
	    #ok
	} elsif ($sex == 1) {
	    $sex = 'Male';
	} elsif ($sex == 2) {
	    $sex = 'Female';
	} else {
	    warn "sex=$sex ?";
	}
	$Demog{$key} = {
			born=>$year_born,
			edu=>"Some college but no degree",
#			major=>$major,
			city=>'Charlottesville, VA',
			country=>'USA',
			sex=>$sex,
		       };
    }
}

our @Q01 = ("This is the first time I have thought about it.",
	     "The notion has crossed my mind, but I'm not sure what it means to me.",
	     "I have discussed it with friends.",
	     "I have read something about it.",
	     "I study the topic with interest.");

our @Q02 = ('Agree',
	     'Agree somewhat',
	     'Not sure',
	     'Disagree somewhat',
	     'Disagree');

our @Q03 = ("This is the first time I have thought about it.",
	     "The question has crossed my mind but I'm not sure.",
	     "I have discussed it with friends but I'm not sure.",
	     "I have a gut feeling about whether it is ethical.",
	     "My mind is made up about whether it is ethical.");

our @Q04 = ('True', 'Not sure', 'False');

our @Q05 = ('Yes', 'Not Sure', 'No',
	    'I know how to cause myself to experience complete mental silence.');

our @Q06 = ('Daily', 'Weekly', 'Infrequently',
	   "I don't try to cause myself to experience complete mental silence");

our @Q07 = ('Mostly moments (e.g. an isolated second or two)',
	    'Sometimes moments and sometimes continuous (e.g. isolated seconds and sometimes ten seconds or longer)',
	    'Mostly continuous (e.g. usually ten seconds or longer)',
	    'I have not experienced complete mental silence');

our @Q08 = ('A moment (e.g., a second or shorter)',
	   '10 seconds',
	   '1-2 minutes',
	    'More than 10 minutes',
	    'I have not experienced complete mental silence');

sub flush_data {
    my ($email, $end, $data) = @_;
    return if $email eq 'sw9uw@virginia.edu'; # researcher
    if (!exists $Demog{$email}) {
	#warn "$email not found in demographics"; TODO
	#return;
    }
    if ($email eq 'lx4ue@virginia.edu') {
	push @$end, '03/10/2013'; # guess
    }
    my $dg = $Demog{$email};
    my $wave = 1;
    my $wave_count = 0;
    for my $when (qw(Pre Mid Post)) {
	my $wdata = $data->{$when};
	if (keys %$wdata == 0) {
	    #warn "$email skipped wave $wave";
	    next;
	}
	my @rec;
	$rec[ $OutMap->{'email'} ] = $email;
	if ($end->[$wave - 1]) {
	    # these are in MM/DD/YYYY format, ugh TODO
	    $rec[ $OutMap->{'end'} ] = $end->[$wave - 1];
	} else {
	    $rec[ $OutMap->{'end'} ] = '2013-03-10';
	}
	$rec[ $OutMap->{'wave'} ] = "germano2013-$wave";
	$rec[ $OutMap->{instrument} ] = '2013-01-09';
	if ($dg) {
	    for my $k (keys %$dg) {
		die $k if !exists $OutMap->{$k};
		$rec[ $OutMap->{$k} ] = $dg->{$k};
	    }
	}
	for my $k (keys %$wdata) {
	    die $k if !exists $OutMap->{$k};
	    $rec[ $OutMap->{$k} ] = $wdata->{$k};
	}
	$csv->print(*STDOUT, \@rec);
	++$wave_count;
    } continue {
	++$wave;
    }
    die $email if @$end != $wave_count;
}

sub load_data {
    open my $ms, '<', 'Germano-2013-ms.csv';
    my $h1 = $csv->getline($ms);
    my %col;
    for (my $c=0; $c < @$h1; ++$c) { $col{$h1->[$c]} = $c }
    my @end;
    my %data;
    my $email = '';
    while (defined(my $r = $csv->getline($ms))) {
	next if !@$r;
	if ($r->[2] and $r->[2] ne $email) {
	    if ($email) {
		flush_data($email, \@end, \%data);
	    }
	    @end = ();
	    %data = ();
	    $email = $r->[2];

	    for my $when (qw(Pre Mid Post)) {
		for my $qn (1..24) {
		    next if ($qn==14 or $qn==18);
		    my $cname = "JMSS $qn ($when)";
		    if (!exists $col{$cname}) { die $cname }
		    my $got = $r->[ $col{$cname} ];
		    next if !length($got);
		    if ($qn == 1) {
			$data{$when}{'msNotion'} = $Q01[$got - 1];
		    } elsif ($qn == 2 || $qn == 3) {
			# ign
		    } elsif ($qn == 4) {
			$data{$when}{'msMet'} = $Q02[$got - 1];
		    } elsif ($qn == 5) {
			# ign
		    } elsif ($qn == 6) {
			$data{$when}{'msShared'} = $Q02[$got - 1];
		    } elsif ($qn == 7) {
			$data{$when}{'msCause'} = $Q02[$got - 1];
		    } elsif ($qn == 8) {
			$data{$when}{'msEnv'} = $Q02[$got - 1];
		    } elsif ($qn == 9) {
			$data{$when}{'msTeach'} = $Q02[$got - 1];
		    } elsif ($qn == 10) {
			$data{$when}{'msEvery'} = $Q02[$got - 1];
		    } elsif ($qn == 11) {
			$data{$when}{'msPay'} = $Q02[$got - 1];
		    } elsif ($qn == 12) {
			$data{$when}{'msPaySure'} = $Q03[$got - 1];
		    } elsif ($qn == 13) {
			$data{$when}{'msTrainTeach'} = $Q02[$got - 1];
		    } elsif ($qn == 15) {
			$data{$when}{'boreFidget'} = $Q04[$got - 1];
		    } elsif ($qn == 16) {
			$data{$when}{'boreCheer'} = $Q04[$got - 1];
		    } elsif ($qn == 17) {
			$data{$when}{'boreLone'} = $Q04[$got - 1];
		    } elsif ($qn == 19) {
			$data{$when}{'wantLearn'} = $Q05[$got - 1];
		    } elsif ($qn == 20) {
			$data{$when}{'freqCause'} = $Q06[$got - 1];
		    } elsif ($qn == 21) {
			$data{$when}{'pctSuccess'} = $got;
		    } elsif ($qn == 22) {
			# ign
		    } elsif ($qn == 23) {
			$data{$when}{'durationCharacter'} = $Q07[$got - 1];
		    } elsif ($qn == 24) {
			$data{$when}{'maxDuration'} = $Q08[$got - 1];
		    } else { die $qn }
		}
	    }
	}
	push @end, $r->[0];
    }
    flush_data($email, \@end, \%data);
}

load_demog();
load_data();
