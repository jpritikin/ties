\documentclass[12pt]{article}
\usepackage{fixltx2e}
\usepackage[margin=.5in]{geometry}
\usepackage{pdfpages}
\setlength{\parindent}{0cm}
\setlength{\parskip}{1ex}

<<echo=FALSE, results='hide', warning=FALSE, cache=FALSE>>=
#options(error = browser)
library(knitr)
#knit("cms-calibrate.Rnw", tangle=TRUE)  # to extract only the R chunks
opts_knit$set(error=TRUE)
opts_chunk$set(echo=FALSE, cache=FALSE)
loadlib <- function () {
library(rpf)
library(OpenMx)
library(ggplot2)
library(reshape2)
library(plyr)
library(grid)
library(gridExtra)
library(xtable)
library(psych)
library(GPArotation)
library(ifaTools)
}
suppressPackageStartupMessages(loadlib())
options(digits=2, scipen=1)

itemMapText <- geom_text(size=4, position=position_jitter(h=.25))
popSplit <- TRUE
@

\title{Calibration of item models for the Complete Mental Silence Disposition Scale}
\date{\today}
\author{Joshua N.~Pritikin\\ University of Virginia}

\begin{document}
\maketitle

\section{Data Sources}

The CMS calibration sample is composed of a number of different datasets.

<<results='asis'>>=
source("cms-score-lib.R")

load("espt.rda")
espt <- cms.testlets(espt)

src <- ddply(espt, ~wave, function(slice) c(types=length(unique(slice$instrument))))

if (any(src$types != 1)) {
  stop("There should be no more than 1 instrument version per wave.")
}

src <- ddply(espt, ~wave, function(slice) c(instrument=unique(slice$instrument), count=nrow(slice),
                                            start=min(slice$start), end=max(slice$end)))
src <- src[order(src$instrument, src$end, src$start),]
print(xtable(src), include.rownames=FALSE)
@

A large proportion of data is missing, but the maximum N=\Sexpr{sum(as.numeric(src$count))}.

<<fig.height=4>>=
# 
# add back in the first page TODO
rawTrain <- c('msMet', 'msShared', 'msTeach', 'msTrainTeach')
rawCols <- c(#"msNotion", "msAny", "msChildhood", "msEvery", "wantLearn",
             "msEffort", "msEmo", "msAfraid", "msFast", "msLife", "msIdentity", "msPreoccu",
             "msYearn", "msEnv", "msAllow", #"msTaught",  add later with more data
             'freqCause', 'msTimeAlloc', 'pctSuccess', 'maxDuration', "maxDurationOut",
             rawTrain, paste0(rawTrain, "Num"))
rawData <- as.data.frame(lapply(espt[,rawCols], function(col) {
  if (is.factor(col)) {
      as.numeric(unclass(col))
    } else {
      as.numeric(col)
    }
}))
rawDataCor <- cor(rawData, use="pairwise.complete.obs")
estSampleSize <- sum(!is.na(rawData)) / ncol(rawData)
capture.output( fa.parallel(rawDataCor, n.obs=estSampleSize, main=NULL, fa="fa"), file='NUL')
@

<<results='asis'>>=
f3 <- fa(rawDataCor, 3)
loadDims <- dimnames(f3$loadings)
rawLoad <- matrix(f3$loadings, sapply(loadDims, length), dimnames=loadDims)
minLoading <- .2
rawLoad[abs(rawLoad) < minLoading] <- NA
print(xtable(rawLoad, paste0("Factor loadings with minimum loading set to ", minLoading, ".")))
@

\section{Barrier}

The \emph{barrier} factor is intended to non-judgmentally assess the participant's
self-reported inability to experience complete mental silence.
The items must make sense on a short time horizon and
should also be amenable to long-term barriers.

<<>>=
fitBarrer <- function(ba.data) {
  barrier.items <- setdiff(colnames(ba.data), "population")
  ba.data <- ba.data[rowSums(!is.na(ba.data[,barrier.items])) > 0,]
  
  factors <- c('barrier')
#  factors <- c('barrier', 'emo', 'struct')
  spec <- lapply(barrier.items, function(nm) {
    lev <- length(levels(ba.data[[ nm ]]))
    rpf.grm(outcomes=lev, factors=length(factors))
  })
  
  maxParam <- max(sapply(spec, rpf.numParam))
  imat <- mxMatrix(name="item", nrow=maxParam, ncol=length(spec), free=FALSE,
                     dimnames=list(c(factors, paste('b', (1+length(factors)):maxParam, sep="")),
                                   barrier.items))
  imat$values['barrier',] <- 1
  imat$labels['barrier',] <- 'slope'
if(length(factors)==3) {
  imat$values['emo',intersect(c('wantLearn', "msAfraid", "msIdentity","msEmo"),barrier.items)] <- 1
  imat$values['struct',intersect(c("msFast", "msFast1", "msEffort", "msLife", "msPreoccu"), barrier.items)] <- 1
}
  imat$values[(1+length(factors)):nrow(imat),] <-
    mxSimplify2Array(lapply(spec, function(s) seq(1,.1,length.out = s$outcomes-1)))
  imat$free[,] <- !is.na(imat$values[,]) & imat$values[,] != 0

  tmpl <- mxModel(model="barrier", imat,
                  mxExpectationBA81(spec),
                  mxFitFunctionML())
  
  mMat <- mxMatrix(name='mean', nrow=length(factors), ncol=1, values=0, free=TRUE)
  rownames(mMat) <- factors
  covMat <- mxMatrix(name='cov', values=diag(length(factors)))
  diag(covMat$free) <- TRUE
  dimnames(covMat) <- list(factors, factors)

  ba <- replicateModelBy(tmpl, ba.data, mMat, covMat, split=popSplit)
  em <- ba$compute
  ba <- mxModel(ba, mxComputeSequence(steps=list(
    em,
    mxComputeOnce('fitfunction', 'information', "meat"),
    mxComputeStandardError(),
    mxComputeHessianQuality())
  ))
  
  got <- mxRun(ba, silent=TRUE)
  got
}

# bitem <- c("msAfraid", "msIdentity", "msFast", "msEffort", "msLife", "msEmo")
ba.data <- espt[, c('population', "msAfraid", "msIdentity", "msPreoccu",
                    "msFast", "msEffort", "msLife")]
barrier.items <- setdiff(colnames(ba.data), "population")
notSure <- apply(espt[,barrier.items] == "not sure", 1, all)
notSure <- !is.na(notSure) & notSure
ba.data <- ba.data[!notSure,]
#lev <- levels(ba.data[[1]])[c(3,1,2,4,5)]
#ba.data <- mxFactor(ba.data, lev)

# "msDescarte" == worst S fit
# "wantLearn" poor discrimination, locally dependent with msEffort (duh) & msEmo
ba.est <- fitBarrer(ba.data)

interactive <- FALSE
if (interactive) {
  ba.est$output$conditionNumber
}
pop <- list()
pops <- sapply(strsplit(ba.est$compute$steps[[1]]$expectation, ".", fixed=TRUE),
               function(x) x[[1]])

for (p1 in pops) {
  pop[[p1]][['barrier']] <- as.IFAgroup(ba.est[[p1]], minItemsPerScore = 3L)
  if (FALSE && !is.null(pop[[p1]]$barrier$mean)) {
    print(pop[[p1]]$barrier$mean)
    print(pop[[p1]]$barrier$cov)
  }
}

if (0) {
  rpf.1dim.fit(group=pop$general$barrier, margin=2)
  rpf.1dim.fit(group=pop$uva$barrier, margin=2)
}

#multinomialFit(pop$uva$barrier)
#mnf <- multinomialFit(ba.grp)
if (interactive) {
  ba.grp$param
  mnf
}

if (0) {
  mcReps <- 100
  stat <- rep(NA, mcReps)
  for (rx in 1:mcReps) {
    t1 <- ba.grp
    t1$data <- rpf.sample(grp=ba.grp)
    got <- multinomialFit(t1)
    stat[rx] <- got$statistic
  }
  log(sum(stat > mnf$statistic) / mcReps)
}
@ 

Participants who answered ``not sure'' for all items
were excluded ($n=\Sexpr{sum(notSure)}$).
For a single factor model, the items were highly locally dependent.
% Two subfactors were hypothesized: an emotional subfactor for
% \Sexpr{names(which(ba.grp$param['emo',] !=0))}; and a structural subfactor for
% \Sexpr{names(which(ba.grp$param['struct',] !=0))}.
A bi-factor model was not empirically identified.
A Rasch model was fit with -2LL=\Sexpr{ba.est$output$fit} and
condition number \Sexpr{ba.est$output$conditionNumber}.
% The full-information multinomial fit test was conducted,
% $n=\Sexpr{mnf$n}$, $G^2(\Sexpr{mnf$df})=\Sexpr{mnf$statistic}$.

<<fig.height=2>>=
baGrp <- lapply(pop, function (x) sumScoreEAPTest(omitMostMissing(x$barrier, 1)))
got <- Reduce('+', baGrp)

df <- data.frame(score=as.numeric(names(got$observed)),
            expected=got$expected, observed=got$observed)
df <- melt(df, id="score", variable.name="source", value.name="n")
ggplot(df, aes(x=score, y=n, color=source)) + geom_line()

if (0) {
  ss <- observedSumScore(baGrp1, summary=FALSE)
  mask <- !is.na(ss) & ss==12
  ss12 <- baGrp1$data[mask,]
  table(apply(ss12, 1, function(r) all(r == "not sure")))  # huh?
}
@

<<results='asis'>>=
got <- Reduce('+', lapply(pop, function (x) ChenThissen1997(x$barrier)))
print(xtable(got$pval, paste("Log p-value of local dependence between item pairs.")),
      size="\\footnotesize")
@

<<results='asis'>>=
numToOmit <- 1
toOmit <- lapply(barrier.items, function(x) bestToOmit(pop$general$barrier, numToOmit, x))
sfit <- Reduce('+', lapply(pop, function (x) SitemFit(x$barrier, omit = toOmit)))
tbl <- t(sapply(sfit, function(r) c(n=r$n, df=r$df, stat=r$statistic, pval=r$pval)))
print(xtable(tbl, paste0("Sum-score item-wise fit, omitting ",numToOmit," item.")))
@

<<fig.height=2>>=
map1 <- itemResponseMap(pop$general$barrier, factor=1)
ggplot(map1, aes(x=score, y=item, label=outcome)) + itemMapText
@

<<fig.height=3>>=
pl <- lapply(names(sfit), function(item) {
  SitemPlot(sfit, item)
})
for (px in 1:length(pl)) {
  print(pl[[px]])
}
print(plotInformation(pop$general$barrier, width=5, basis=c(1)))
@

\section{Training}

The \emph{training} factor is intended to assess the self-reported degree
of preparation and expertise a participant has with complete mental silence.
The items probe ability to cause oneself to experience mental silence
and ability to work with others.
To assess experience with others,
items probe both belief in oneself to work with others and
quantitatively how much one has worked with others.

<<>>=
fitTraining <- function(tr.data) {
  training.items <- setdiff(colnames(tr.data), "population")
    tr.data <- tr.data[rowSums(!is.na(tr.data[,training.items])) > 0,]

  factors <- c('training', 'lifetime')
#  factors <- c('training')
  spec <- lapply(training.items, function(nm) {
    lev <- length(levels(tr.data[[ nm ]]))
    rpf.grm(outcomes=lev, factors=length(factors))
  })
  names(spec) <- training.items
  
  for (item in intersect(c('trainSkill', 'trainNum', 'msTimeAlloc'), names(spec))) {
    spec[item] <- mkspec(espt, item, length(factors))
  }
  numItems <- length(training.items)
  maxParam <- max(sapply(spec, rpf.numParam))
  
  imat <- mxMatrix(name="item", nrow=maxParam, ncol=numItems,
                     dimnames=list(c(factors,
                                     paste('p',(length(factors)+1):maxParam,sep="")), training.items))
  imat$values[,] <- mxSimplify2Array(lapply(spec, rpf.rparam))
  imat$values['training',] <- 1
  if (any('lifetime' == factors)) {
    imat$values['lifetime',] <- 0
    imat$values['lifetime', intersect(c('msMet', 'msShared', 'msTeach', 'msTrainTeach'), training.items)] <- 1
    imat$values['lifetime', intersect(paste0(c('msMet', 'msShared', 'msTeach', 'msTrainTeach'), "Num"), training.items)] <- 1
  }
  imat$free[,] <- !is.na(imat$values) & imat$values[,] != 0

  imat <- set.nominal.rank(spec, imat, 'trainSkill', 0, .3)
  imat <- set.nominal.rank(spec, imat, 'trainNum', 0, .15)
#  imat <- set.nominal.rank(spec, imat, 'freqCause', 0, 1)
  imat <- set.nominal.rank(spec, imat, 'msTimeAlloc', 0, .5)

  train <- mxModel(model="training", imat,
                   mxExpectationBA81(spec, qwidth=5, qpoints=39),
                   mxFitFunctionML())

  mMat <- mxMatrix(name='mean', nrow=length(factors), ncol=1, values=0, free=TRUE)
  rownames(mMat) <- factors
  covMat <- mxMatrix(name='cov', values=diag(length(factors)))
  diag(covMat$free) <- TRUE
  dimnames(covMat) <- list(factors, factors)

  trM <- replicateModelBy(train, tr.data, mMat, covMat, split=popSplit)
  em <- trM$compute
  trM <- mxModel(trM, mxComputeSequence(steps=list(
    em,
    mxComputeOnce('fitfunction', 'information', "meat"),
    mxComputeStandardError(),
    mxComputeHessianQuality())
  ))
  got <- mxRun(trM, silent=TRUE)
  got
}

# not specific enough: "msAny", "msEvery"
# c("yearnEnv", "allowCause", "trainSkill", "trainNum")
tr.items <- c('msMet', 'msShared', 'msTeach', 'msTrainTeach')
tr.items <- c(tr.items, paste0(tr.items, 'Num'))
tr.items <- c(tr.items, 'freqCause', 'msTimeAlloc')

when <- strptime(espt[['instrument']], "%Y-%m-%d")
revision1 <- strptime("2013-12-15", "%Y-%m-%d")  # slowly increase to 2014-09-15
ver.mask <- difftime(when, revision1) > 0

tr.est <- fitTraining(espt[ver.mask, c('population', tr.items)])

pops <- sapply(strsplit(tr.est$compute$steps[[1]]$expectation, ".", fixed=TRUE),
               function(x) x[[1]])

for (p1 in pops) {
  pop[[p1]][['training']] <- as.IFAgroup(tr.est[[p1]], minItemsPerScore = 2L)
  if (FALSE && !is.null(pop[[p1]]$training$mean)) {
    print(pop[[p1]]$training$mean)
    print(pop[[p1]]$training$cov)
  }
}

#mnf <- multinomialFit(omitMostMissing(tr.grp, 1))

if (0) {
  mcReps <- 100
  stat <- rep(NA, mcReps)
  for (rx in 1:mcReps) {
    t1 <- tr.grp
    t1$data <- rpf.sample(grp=tr.grp)
    got <- multinomialFit(t1, omit=1)
    stat[rx] <- got$statistic
  }
  log(sum(stat > mnf$statistic) / mcReps)
}

@

Calibration of the training factor is hindered by the late addition
of the trainNum item.
For a single factor model, the items were highly locally dependent.
%Two subfactors were hypothesized: a self subfactor for
%\Sexpr{names(which(tr.grp$param['self',] !=0))}; and an other subfactor for
%\Sexpr{names(which(tr.grp$param['other',] !=0))}.
A candidate model obtains $-2LL=\Sexpr{tr.est$output$fit}$
with condition number \Sexpr{tr.est$output$conditionNumber}.
% The full-information multinomial fit test was conducted,
% $n=\Sexpr{mnf$n}$, $G^2(\Sexpr{mnf$df})=\Sexpr{mnf$statistic}$.

<<fig.height=2>>=
toOmit <- bestToOmit(pop$general$training, 1)
got <- Reduce('+',lapply(pop, function (x) sumScoreEAPTest(omitItems(x$training, toOmit))))

df <- data.frame(score=as.numeric(names(got$observed)),
            expected=got$expected, observed=got$observed)
df <- melt(df, id="score", variable.name="source", value.name="n")
ggplot(df, aes(x=score, y=n, color=source)) + geom_line()
@

<<results='asis'>>=
got <- Reduce('+', lapply(pop, function (x) ChenThissen1997(x$training)))
print(xtable(got$pval, paste("Log p-value of local dependence between item pairs.")),
      size="\\footnotesize")
@ 

<<results='asis'>>=
numToOmit <- 1
toOmit <- lapply(tr.items, function(x) bestToOmit(pop$general$training, numToOmit, x))
sfit <- Reduce('+', lapply(pop, function (x) SitemFit(x$training, omit = toOmit)))
tbl <- t(sapply(sfit, function(r) c(n=r$n, df=r$df, stat=r$statistic, pval=r$pval)))
print(xtable(tbl, paste0("Sum-score item-wise fit, omitting ",numToOmit," item.")))
@

<<fig.height=2>>=
map1 <- itemResponseMap(pop$general$training, factor=1)
ggplot(map1, aes(x=score, y=item, label=outcome)) + itemMapText
@

<<fig.height=3>>=
pl <- lapply(names(sfit), function(item) {
  SitemPlot(sfit, item)
})
for (px in 1:length(pl)) {
  print(pl[[px]])
}
basis <- rep(0, pop$general$training$spec[[1]]$factors)
basis[1] <- 1
print(plotInformation(pop$general$training, width=5, basis=basis))
@

\section{Event}

The \emph{event} factor is intended to assess the self-reported
intensity of experiencing complete mental silence.

<<>>=
fitEvent <- function(ev.data) {
  event.items <- setdiff(colnames(ev.data), "population")
  ev.data <- ev.data[rowSums(!is.na(ev.data[,event.items])) > 0,]

  spec <- mkspec(espt, event.items)
  numItems <- length(event.items)
  maxParam <- max(sapply(spec, rpf.numParam))
  factors <- c('event')

  imat <- mxMatrix(name="item", nrow=maxParam, ncol=numItems,
                   dimnames=list(c(factors, paste("p",2:maxParam,sep="")), event.items))
  imat$values <- NA
  
  imat <- set.nominal.rank(spec, imat, 'msAny', .51, 1)
  imat <- set.nominal.rank(spec, imat, 'msEvery', .51, 1)
  imat <- set.nominal.rank(spec, imat, 'freqCause', 0, 1)
  imat <- set.nominal.rank(spec, imat, 'successCat', .35, 1)
  imat <- set.nominal.rank(spec, imat, 'maxDuration', .25, .75)
  imat <- set.nominal.rank(spec, imat, 'maxDurationOut', 0, .5)
  imat <- set.nominal.rank(spec, imat, 'msYearn', 0, 1)
  imat <- set.nominal.rank(spec, imat, 'msEnv', 0, 1)
  imat <- set.nominal.rank(spec, imat, 'msAllow', 0, 1)
  imat <- set.nominal.rank(spec, imat, 'msTaught', 0, .5)
  imat <- set.nominal.rank(spec, imat, 'msTimeAlloc', 0, .5)
  
  eTmpl <- mxModel(model="event", imat,
                mxExpectationBA81(spec),
                mxFitFunctionML())
  
  mMat <- mxMatrix(name='mean', nrow=length(factors), ncol=1, values=0, free=TRUE)
  rownames(mMat) <- factors
  covMat <- mxMatrix(name='cov', values=diag(length(factors)))
  diag(covMat$free) <- TRUE
  dimnames(covMat) <- list(factors, factors)

  ev <- replicateModelBy(eTmpl, ev.data, mMat, covMat, split=popSplit)
  em <- ev$compute
  ev <- mxModel(ev, mxComputeSequence(steps=list(
    em,
    mxComputeOnce('fitfunction', 'information', "meat"),
    mxComputeStandardError(),
    mxComputeHessianQuality())
  ))

  ev <- mxRun(ev, silent=TRUE)
  ev
}

evItems <- c("msYearn", "msEnv", "msAllow", "msTaught",
             'successCat', 'maxDuration', "maxDurationOut")
ev.est <- fitEvent(espt[,c(evItems, "population")])

pops <- sapply(strsplit(ev.est$compute$steps[[1]]$expectation, ".", fixed=TRUE),
               function(x) x[[1]])
for (p1 in pops) {
  pop[[p1]][['event']] <- as.IFAgroup(ev.est[[p1]], minItemsPerScore = 2L)
  if (FALSE && !is.null(pop[[p1]]$event$mean)) {
    print(pop[[p1]]$event$mean)
    print(pop[[p1]]$event$cov)
  }
}

#mnf <- multinomialFit(ev.grp)

if (0) {
  mcReps <- 100
  stat <- rep(NA, mcReps)
  for (rx in 1:mcReps) {
    t1 <- ev.grp
    t1$data <- rpf.sample(grp=ev.grp)
    got <- multinomialFit(t1, omit=1)
    stat[rx] <- got$statistic
  }
  log(sum(stat > mnf$statistic) / mcReps)
}
@ 

A possible model had -2LL=\Sexpr{ev.est$output$fit} and
condition number \Sexpr{ev.est$output$conditionNumber}.
% The full-information multinomial fit test was conducted,
% $n=\Sexpr{mnf$n}$, $G^2(\Sexpr{mnf$df})=\Sexpr{mnf$statistic}$.

<<fig.height=2>>=
toOmit <- bestToOmit(pop$general$event, 3)
got <- Reduce('+',lapply(pop, function (x) sumScoreEAPTest(omitItems(x$event, toOmit))))

df <- data.frame(score=as.numeric(names(got$observed)),
            expected=got$expected, observed=got$observed)
df <- melt(df, id="score", variable.name="source", value.name="n")
ggplot(df, aes(x=score, y=n, color=source)) + geom_line()
@

<<fig.height=2>>=
map1 <- itemResponseMap(pop$general$event, factor=1)
ggplot(map1, aes(x=score, y=item, label=outcome)) + itemMapText
@

<<results='asis'>>=
got <- Reduce('+', lapply(pop, function (x) ChenThissen1997(x$event)))
print(xtable(got$pval, paste("Log p-value of local dependence between item pairs.")),
      size="\\footnotesize")
@ 

<<results='asis'>>=
numToOmit <- 2
toOmit <- lapply(evItems, function(x) bestToOmit(pop$general$event, numToOmit, x))
sfit <- Reduce('+', lapply(pop, function (x) SitemFit(x$event, omit = toOmit)))
tbl <- t(sapply(sfit, function(r) c(n=r$n, df=r$df, stat=r$statistic, pval=r$pval)))
print(xtable(tbl, paste0("Sum-score item-wise fit, omitting ",numToOmit," item.")))
@

<<fig.height=3>>=
pl <- lapply(names(sfit), function(item) {
  SitemPlot(sfit, item)
})
for (px in 1:length(pl)) {
  print(pl[[px]])
}
print(plotInformation(pop$general$event, width=5, basis=c(1)))
@

<<>>=
for (p1 in names(pop)) {
  for (f1 in names(pop[[p1]])) {
    pop[[p1]][[f1]] <- stripData(pop[[p1]][[f1]])
  }
}
save(pop, file="cms-fit.rda")

#items <- t(m2$ItemParam@values)
#rownames(items) <- item.names
#espt[mask, "score"] <- m2@expectation@scores.out[,1]
#espt[mask, "se"] <- m2@expectation@scores.out[,2]

if (0) {
  sc <- m2.est@expectation@scores.out
  for (l in 1:3) {
    mask <- espt$durationCharacter==levels(espt$durationCharacter)[l]
    mask <- !is.na(mask) & mask
    print(paste(l, mean(sc[mask,1]), mean(sc[mask,2])))
  }
}
@

\section{Cross-sectional Relationship}

<<results='asis'>>=
source("cms-score.R")
cms <- NULL
if (!popSplit) {
  cms <- cms.score('general', espt)
} else {
  for (p1 in pops) {
    cms <- rbind(cms, cms.score(p1, subset(espt, population == p1)))
  }
}
miss <- apply(cms, 2, function(c) sum(is.na(c))) / nrow(cms)
miss <- t(100 * miss)
rownames(miss) <- "% missing"
print(xtable(miss, "Percentage of scores missing."))
@ 

<<results='asis'>>=
fl <- rbind(apply(cms, 2, function(c) sum(c==min(c, na.rm=TRUE), na.rm=TRUE)),
            apply(cms, 2, function(c) sum(c==max(c, na.rm=TRUE), na.rm=TRUE)))
fl <- fl * 100 / nrow(cms)
rownames(fl) <- c("floor", "ceiling")
print(xtable(fl, "Percentage of scores at floor and ceiling."))
@ 

<<results='asis'>>=
ctbl <- cor(cms, use="pairwise.complete.obs")
ctbl[upper.tri(ctbl, diag=TRUE)] <- NA
print(xtable(ctbl, "Correlation matrix of factor scores."))
@ 

<<fig.height=3>>=
mask1 <- !is.na(cms[,'barrier']) & !is.na(cms[,'event'])
mask2 <- !is.na(cms[,'training']) & !is.na(cms[,'event'])
grid.arrange(qplot(cms[mask1,'barrier'],  cms[mask1,'event']) + coord_fixed() +
                     labs(x="barrier", y="event") + geom_abline(slope=-1, color="red"),
                   qplot(cms[mask2,'training'], cms[mask2,'event']) + coord_fixed() +
                     labs(x="training", y="event") + geom_abline(slope=1, color="red"), ncol=2)

fit1 <- lm(event ~ ., data=as.data.frame(cms))
#  plot(fit1)

co <- round(coef(fit1),2)
mask3 <- apply(cms, 1, function (r) all(!is.na(r)))
print(qplot(co[1] + co[2] * cms[mask3,'barrier'] + co[3] * cms[mask3,'training'],
            cms[mask3,'event']) + coord_fixed() + geom_abline(slope=1, color="red") +
        labs(x=paste(co[1],"+", co[2],"barrier","+",co[3], "training"), y="event"))

if (0) {
  table(espt$wave[is.na(cms[,'barrier'])])
  mask <- espt$wave == "earlydata/ppool-20130219" #& is.na(cms[,'barrier'])
  
  espt[mask, c("wantLearn", "msAfraid", "msIdentity", "msFast", "msEffort", "msLife")]
}
@

\break
<<>>=
summary(fit1)
@


% A simple linear model to predict event from barrier and training
% obtains $R^2 = \Sexpr{summary(fit1)[["r.squared"]]}$.

\includepdf[pages={3-}]{archive/short-201410.pdf}

\end{document}
